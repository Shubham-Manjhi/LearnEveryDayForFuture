**Java Topic: LeetCode 149 – Max Points on a Line**

---

✅ 1. Definition and Purpose

• What is the concept?\
Given an array of points where `points[i] = [xi, yi]`, return the maximum number of points that lie on the same straight line.

• Why does it exist in Java?\
This problem involves geometry, hashing, and precision handling using slopes. It is a good test of edge case analysis and line calculations.

• What problem does it solve?\
Finds the largest subset of collinear points among a set of coordinates.

🧠 Example: Input: [[1,1],[2,2],[3,3]] → Output: 3

---

✅ 2. Syntax and Structure

• Define `int maxPoints(int[][] points)`\
• Use nested loops to calculate slopes from one anchor point to others\
• Store slope frequency in a map

---

✅ 3. Practical Examples

🔹 Approach 1: HashMap with Reduced Fraction Slopes (Optimized)

📌 Idea: Use greatest common divisor (GCD) to normalize the slope to avoid floating-point precision issues.

```java
public class MaxPointsOnLine {
    public int maxPoints(int[][] points) {
        if (points.length <= 2) return points.length;
        int max = 0;

        for (int i = 0; i < points.length; i++) {
            Map<String, Integer> map = new HashMap<>();
            int samePoint = 1, currMax = 0;

            for (int j = i + 1; j < points.length; j++) {
                int dx = points[j][0] - points[i][0];
                int dy = points[j][1] - points[i][1];

                if (dx == 0 && dy == 0) {
                    samePoint++;
                    continue;
                }

                int gcd = gcd(dx, dy);
                dx /= gcd;
                dy /= gcd;

                String slope = dx + "/" + dy;
                map.put(slope, map.getOrDefault(slope, 0) + 1);
                currMax = Math.max(currMax, map.get(slope));
            }

            max = Math.max(max, currMax + samePoint);
        }

        return max;
    }

    private int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }
}
```

📌 Example:

```
Input: [[1,1],[2,2],[3,3],[0,4],[5,2],[1,3]]
Anchor = [1,1]
Slopes:
[2,2] → 1/1
[3,3] → 1/1
[0,4] → -3/1
[5,2] → 1/4
[1,3] → 0/1
→ Max = 3 points on line with slope 1/1
```

🔹 Approach 2: Brute Force with Double Precision (Less Optimal)

```java
public class MaxPointsOnLineDouble {
    public int maxPoints(int[][] points) {
        if (points.length <= 2) return points.length;
        int max = 0;

        for (int i = 0; i < points.length; i++) {
            Map<Double, Integer> map = new HashMap<>();
            int samePoint = 1, currMax = 0;

            for (int j = i + 1; j < points.length; j++) {
                if (points[i][0] == points[j][0] && points[i][1] == points[j][1]) {
                    samePoint++;
                    continue;
                }

                double slope = points[i][0] == points[j][0] ? Double.POSITIVE_INFINITY :
                               (double)(points[j][1] - points[i][1]) / (points[j][0] - points[i][0]);
                map.put(slope, map.getOrDefault(slope, 0) + 1);
                currMax = Math.max(currMax, map.get(slope));
            }

            max = Math.max(max, currMax + samePoint);
        }

        return max;
    }
}
```

📌 Why Less Optimal:

- Floating-point precision errors may miscount\

- Works fine for small inputs

---

✅ 4. Internal Working

• Normalizing slopes ensures correctness and avoids floating-point errors\
• HashMap tracks frequency of identical slopes from a reference point\
• GCD helps convert slope into simplest form

Time Complexity: O(n^2)

Space Complexity: O(n) per iteration for slope map

---

✅ 5. Best Practices

✔ Normalize slopes with GCD to avoid rounding errors\
✔ Handle vertical lines and overlapping points separately

---

✅ 6. Related Concepts

- Slope geometry\

- GCD (Greatest Common Divisor)\

- HashMap frequency tracking

🧠 Example: Geospatial mapping, clustering algorithms

---

✅ 7. Interview & Real-world Use

🧠 Interview Use:

- Demonstrates algorithmic precision, hash map logic, and edge handling

🏢 Real-world:

- Analyzing linear patterns in 2D data\

- Identifying trajectories or trends in simulations

---

✅ 8. Common Errors & Debugging

❌ Floating-point precision loss when comparing slopes\
❌ Forgetting to handle duplicate points\
❌ Incorrect GCD normalization

🧪 Debug Tip:

- Print GCD-reduced slope keys to verify correctness

---

✅ 9. Java Version Updates

• Java 8+: Functional features possible, but classic loops preferred for clarity

---

✅ 10. Practice and Application

📝 Practice on:

- LeetCode #149\

- Geometry hashing problems\

- Line detection algorithms

🏗 Apply in:

- Computer vision\

- Robotic path prediction\

- Shape fitting in scatter plots

---

